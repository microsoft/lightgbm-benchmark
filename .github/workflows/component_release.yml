name: Publish components as release assets

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
    inputs:
      name:
        description: 'Reason'
        required: false
        default: '...'

jobs:
  build_release:
    name: Build components for release
    environment: mlops
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - component_folder: src/scripts/training/lightgbm_python/
            component_name: "lightgbm_python_training"
          - component_folder: src/scripts/data_processing/generate_data/
            component_name: "generate_data"

    steps:  
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        sudo apt install zip

        # Install remote version of azure-cli-ml (which includes `az ml component` commands)
        # This might take several minutes depends on your network, thanks for your patience.
        # Install specific stable version (recommended)
        echo "Install remove version of azure-cli-ml..."
        az extension add -n ml --yes --verbose

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDS}}

    - name: Get tag and branch name
      id: tag
      uses: ypicard/get-branch-name-github-action@v1

    - name: Build ${{matrix.component_name}}
      run: |
        # copy sources of the component
        mkdir -p dist/${{matrix.component_name}}/
        cp ${{matrix.component_folder}}/* dist/${{matrix.component_name}}/

        # process "additional includes"
        rm dist/${{matrix.component_name}}/*.additional_includes
        mkdir dist/${{matrix.component_name}}/common/
        cp src/common/* dist/${{matrix.component_name}}/common/

        # compress as zip
        cd dist/
        zip -r component-${{matrix.component_name}}.zip ${{matrix.component_name}}/
        cd ..

        # clean up
        rm -rf dist/${{matrix.component_name}}/

    - name: Upload ${{matrix.component_name}} as build artifact
      uses: actions/upload-artifact@v2.3.1
      with:
        name: ${{matrix.component_name}}
        path: dist/component-${{matrix.component_name}}.zip

  publish_release:
    name: Release components
    environment: mlops
    runs-on: ubuntu-latest
    needs: [build_release]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: release/

      - name: Display structure of release
        run: ls -R
        working-directory: release/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset [lightgbm_python_training]
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: release/lightgbm_python_training/
          asset_name: component-lightgbm_python_training.zip
          asset_content_type: application/zip

      - name: Upload Release Asset [generate_data]
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: release/generate_data/
          asset_name: component-generate_data.zip
          asset_content_type: application/zip
