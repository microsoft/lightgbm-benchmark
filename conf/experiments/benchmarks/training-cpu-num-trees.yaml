# to execute:
# > python src/pipelines/azureml/lightgbm_training.py --exp-config conf/experiments/benchmarks/training-cpu-num-trees.yaml

defaults:
  - aml: custom
  - compute: custom

### CUSTOM PARAMETERS ###

experiment:
  name: "lightgbm_training_benchmark"
  description: "something interesting to say about this"

lightgbm_training_config:
  # name of your particular benchmark
  benchmark_name: "benchmark-cpu-num-trees-20211216.1" # need to be provided at runtime!

  # list all the train/test pairs to train on
  tasks:
    - train:
        name: "data-synthetic-regression-10cols-100000samples-train"
      test:
        name: "data-synthetic-regression-10cols-10000samples-test"
      task_key: "synthetic-regression-10cols" # optional, user to register outputs
    - train:
        name: "data-synthetic-regression-100cols-100000samples-train"
      test:
        name: "data-synthetic-regression-100cols-10000samples-test"
      task_key: "synthetic-regression-100cols" # optional, user to register outputs
    - train:
        name: "data-synthetic-regression-1000cols-100000samples-train"
      test:
        name: "data-synthetic-regression-1000cols-10000samples-test"
      task_key: "synthetic-regression-1000cols" # optional, user to register outputs

  # reference settings for the benchmark
  # all variants are defined as diffs of these parameters
  reference:
    # input parameters
    data:
      auto_partitioning: True # inserts partitioning to match expected number of partitions (if nodes*processes > 1)
      pre_convert_to_binary: False # inserts convertion of train/test data into binary to speed up training (not compatible with auto_partitioning yet)
      header: false
      label_column: "0"
      group_column: null

    # lightgbm training parameters
    training:
      objective: "regression"
      metric: "rmse"
      boosting: "gbdt"
      tree_learner: "data"
      num_iterations: 100
      num_leaves: 31
      min_data_in_leaf: 20
      learning_rate: 0.1
      max_bin: 255
      feature_fraction: 1.0

      # compute parameters
      device_type: "cpu"

      # you can add anything under custom_params, it will be sent as a dictionary
      # to the lightgbm training module to override its parameters (see lightgbm docs for list)
      custom_params:
          deterministic: True
          use_two_round_loading: True

    # compute parameters
    runtime:
      #target: null # optional: force target for this training job
      nodes: 1
      processes: 1

    # model registration
    # naming convention: "{register_model_prefix}-{task_key}-{num_iterations}trees-{num_leaves}leaves-{register_model_suffix}"
    output:
      register_model: False
      #register_model_prefix: "model"
      #register_model_suffix: null

  # variant settings override specific parameters of reference_training
  variants:
    - training:
        num_iterations: 10
    - training:
        num_iterations: 1000
    - training:
        num_iterations: 5000
